<#@ template debug="false" hostspecific="false" language="CSharp" #>
<#@ output extension="cs"  #>
<#@ Assembly Name="System.Xml" #>
<#@ Assembly Name="System.Data" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="SmartCodeGenerator.Uility" #>
<#@ parameter name="ConnectionStr" type="SmartCodeGenerator.Parameter" #>
<#@ parameter name="NameSpace" type="SmartCodeGenerator.Parameter" #>
<#@ parameter name="TableName" type="SmartCodeGenerator.Parameter" #>

//  Copyright © Hewlett-Packard Company. All Rights Reserved.
// </copyright>
<#
CodeGenerateHelper cghelper = new  CodeGenerateHelper();
SqlDBHelper sqlHelper = new SqlDBHelper();
sqlHelper.SqlConnectionString = ConnectionStr.Value;
DataTable dt = sqlHelper.GetTables("select * from [" + TableName.Value + "]");
dt = cghelper.ClearHeard(dt);
#>
using System;
using System.Data;

namespace <#=NameSpace.Value#>
{
	/// <summary> 
	/// Class  <#=TableName.Value#>
	/// DateTime   <#=DateTime.Now#>
	/// </summary>
	<Serializable()> _
	public class  <#=TableName.Value#>
	{
<#
	for (int i = 0; i < dt.Rows.Count; i++)
	{
		string typeStr = cghelper.conver(dt.Rows[i][2].ToString());
#>
		private <#=typeStr#> <#=dt.Rows[i][0].ToString().ToLower()#>;
<#
	}
	for (int i = 0; i < dt.Rows.Count; i++)
	{
#>
		///<summary>
		///<#=dt.Rows[i][0].ToString()#>
		/// </summary>
		public <#=cghelper.conver(dt.Rows[i][2].ToString()) #>  <#=dt.Rows[i][0].ToString()#>
		{
			get{ return <#=dt.Rows[i][0].ToString().ToLower() #>;}
			set{ <#=dt.Rows[i][0].ToString().ToLower()#>=value;}        
		} 
<#
	}
#>
	}
}
