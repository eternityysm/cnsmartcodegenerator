<#@ template debug="false" hostspecific="false" language="CSharp" #>
<#@ output extension="cs"  #>
<#@ Assembly Name="System.Xml" #>
<#@ Assembly Name="System.Data" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="SmartCodeGenerator.Uility" #>
<#@ parameter name="ConnectionStr" type="SmartCodeGenerator.Parameter" #>
<#@ parameter name="NameSpace" type="SmartCodeGenerator.Parameter" #>
<#@ parameter name="TableName" type="SmartCodeGenerator.Parameter" #>

//  Copyright © Hewlett-Packard Company. All Rights Reserved.
// </copyright>
<#
SqlDBHelper sqlHelper = new SqlDBHelper(ConnectionStr.Value); 
CodeGenerateHelper cghelper = new  CodeGenerateHelper(sqlHelper);
DataTable dt =  cghelper.GetDtColumnsInfo(TableName.Value );
#>
using System;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections.Generic;
using Microsoft.Practices.EnterpriseLibrary.Data;
using <#=NameSpace.Value#>.Common;
using <#=NameSpace.Value#>.Entities;

namespace <#=NameSpace.Value#>.DataAccess
{
	/// <summary> 
	/// Class  <#=TableName.Value#>Access
	/// Generated DateTime   <#=DateTime.Now#>
	/// </summary>
	<Serializable()> _
	public class  <#=TableName.Value#>Access
	{
<#
  StringBuilder pkwSqlStr = new StringBuilder();
  StringBuilder pkwSqlStr2 = new StringBuilder();
  StringBuilder pkConditionStr = new StringBuilder();		  
  StringBuilder pkParameterStr = new StringBuilder();
  StringBuilder pkParameterValueStr = new StringBuilder();
  StringBuilder pkVaulesStr = new StringBuilder(); 
  StringBuilder rowMapperStr = new StringBuilder(); 
  StringBuilder accessorStr = new StringBuilder(); 
  
  StringBuilder allwSqlStr = new StringBuilder();
  StringBuilder allConditionStr = new StringBuilder();
  StringBuilder allParameterStr = new StringBuilder();
  StringBuilder allParameterValueStr = new StringBuilder();
  StringBuilder populateValueStr = new StringBuilder();

  int pkCount = 0;
  
  rowMapperStr.Append("IRowMapper<"+TableName.Value+"> map = MapBuilder<"+TableName.Value+">.MapAllProperties().");
  accessorStr.Append("accessor = db.CreateSqlStringAccessor(strSql,MapBuilder<"+TableName.Value+">.MapAllProperties(). ");
  pkParameterValueStr.Append("new object[]{");
  for(int i = 0; i < dt.Rows.Count; i++)
  {
	  rowMapperStr.Append(Environment.NewLine+"				Map(p => p."+dt.Rows[i]["ColumnName"].ToString()+").ToColumn(\""+dt.Rows[i]["ColumnName"].ToString()+"\").");
	  accessorStr.Append(Environment.NewLine+" 				Map(p => p."+dt.Rows[i]["ColumnName"].ToString()+").ToColumn(\""+dt.Rows[i]["ColumnName"].ToString()+"\").");
	  if(populateValueStr.Length >0)
	  {
			populateValueStr.Append( ","+Environment.NewLine+"						"+dt.Rows[i]["ColumnName"].ToString()+" = reader.Get"+cghelper.convertToDbType(dt.Rows[i]["DataTypeName"].ToString()) +"("+i.ToString()+")" );
	  }
	  else
	  {
			populateValueStr.Append( dt.Rows[i]["ColumnName"].ToString()+" = reader.Get"+cghelper.convertToDbType(dt.Rows[i]["DataTypeName"].ToString()) +"("+i.ToString()+")" );
	  }
      if(dt.Rows[i]["IsPK"].ToString() == "Y")
	  {
		  pkCount = pkCount + 1;
		  
		  if(pkConditionStr.Length >0)
		  {
				pkConditionStr.Append(","+cghelper.conver(dt.Rows[i]["DataTypeName"].ToString()) +" "+dt.Rows[i]["ColumnName"].ToString().ToLower() );
		  }
		  else
		  {
			    pkConditionStr.Append(cghelper.conver(dt.Rows[i]["DataTypeName"].ToString()) +" "+dt.Rows[i]["ColumnName"].ToString().ToLower());
		  }
		  if(pkwSqlStr.Length >0)
		  {
				pkwSqlStr.Append(" and "+ dt.Rows[i]["ColumnName"].ToString() +"=@P"+pkCount.ToString());
		  }
		  else
		  {
				pkwSqlStr.Append(" " + dt.Rows[i]["ColumnName"].ToString() +"=@P"+pkCount.ToString());
		  }
		  if(pkwSqlStr2.Length >0)
		  {
				pkwSqlStr2.Append(" and "+ dt.Rows[i]["ColumnName"].ToString() +"=@"+dt.Rows[i]["ColumnName"].ToString());
		  }
		  else
		  {
				pkwSqlStr2.Append(" " + dt.Rows[i]["ColumnName"].ToString() +"=@"+dt.Rows[i]["ColumnName"].ToString());
		  }

		  if(pkParameterStr.Length ==0)
		  {
				pkParameterStr.Append("db.AddInParameter(cmd, \"@"+ dt.Rows[i]["ColumnName"].ToString() +"\",DbType."+cghelper.convertToDbType(dt.Rows[i]["DataTypeName"].ToString())+","+dt.Rows[i]["ColumnName"].ToString().ToLower()+");"+Environment.NewLine);
		  }
		  else
		  {
				pkParameterStr.Append("			db.AddInParameter(cmd, \"@"+ dt.Rows[i]["ColumnName"].ToString() +"\",DbType."+cghelper.convertToDbType(dt.Rows[i]["DataTypeName"].ToString())+","+dt.Rows[i]["ColumnName"].ToString().ToLower()+");"+Environment.NewLine);
		  }
		  if( pkParameterValueStr.ToString().IndexOf(",") == pkParameterValueStr.ToString().Length-1)
		  {
				pkParameterValueStr.Append(dt.Rows[i]["ColumnName"].ToString().ToLower());
		  }
		  else
		  {
		        pkParameterValueStr.Append(dt.Rows[i]["ColumnName"].ToString().ToLower()+",");
		  }
	  }	
	  if(allwSqlStr.Length >0)
	  {
		  allwSqlStr.Append(" and "+ dt.Rows[i]["ColumnName"].ToString() +"=@"+dt.Rows[i]["ColumnName"].ToString());
	  }
	  else
	  {
		  allwSqlStr.Append(" " + dt.Rows[i]["ColumnName"].ToString() +"=@"+dt.Rows[i]["ColumnName"].ToString());
	  }			  		  
	  if(allConditionStr.Length >0)
	  {
			allConditionStr.Append(","+cghelper.conver(dt.Rows[i]["DataTypeName"].ToString()) +" "+dt.Rows[i]["ColumnName"].ToString().ToLower() );
	  }
	  else
	  {
		    allConditionStr.Append(cghelper.conver(dt.Rows[i]["DataTypeName"].ToString()) +" "+dt.Rows[i]["ColumnName"].ToString().ToLower());			  
	  }	   
	  if(allParameterStr.Length == 0)
	  {
			allParameterStr.Append("db.AddInParameter(cmd, \"@"+ dt.Rows[i]["ColumnName"].ToString() +"\",DbType."+cghelper.convertToDbType(dt.Rows[i]["DataTypeName"].ToString())+","+dt.Rows[i]["ColumnName"].ToString().ToLower()+");"+Environment.NewLine);
	  }
	  else
	  {
			allParameterStr.Append("			db.AddInParameter(cmd, \"@"+ dt.Rows[i]["ColumnName"].ToString() +"\",DbType."+cghelper.convertToDbType(dt.Rows[i]["DataTypeName"].ToString())+","+dt.Rows[i]["ColumnName"].ToString().ToLower()+");"+Environment.NewLine);
	  }
  }
  rowMapperStr.Append("Build();");
  accessorStr.Append("Build() );");
  pkParameterValueStr.Append("}");
  if(pkCount > 0)
  {
#>
		///<summary>
		/// Exists
		///</summary>
		public bool Exists(<#=pkConditionStr.ToString()#>)
		{
			Database db = DBHelper.CreateDataBase();
			string strSql =" select count(1) from [<#=TableName.Value #>] where <#=pkwSqlStr2.ToString()#> ";
			DbCommand cmd = db.GetSqlStringCommand(strSql); 
			<#=pkParameterStr.ToString()#>
			return db.ExecuteNonQuery(cmd) > 0 ? true : false;
		}

		///<summary>
		/// Get Entity
		///</summary>
		public <#=TableName.Value#> Get<#=TableName.Value#>(<#=pkConditionStr.ToString()#>)
		{
			<#=TableName.Value#> model = null;
			Database db = DBHelper.CreateDataBase();
			string strSql ="select * from [<#=TableName.Value#>]  where <#=pkwSqlStr2.ToString()#> ";
			DbCommand cmd = db.GetSqlStringCommand(strSql);
			<#=pkParameterStr.ToString()#>
			using (IDataReader reader = db.ExecuteReader(cmd))
			{
				while (reader.Read())
				{
					model = new <#=TableName.Value#>()
					{
						<#=populateValueStr#>
					};
				}
			}
			return  model;
		}
<#
}
#>
		///<summary>
		/// Populate
		///</summary>
		public List<<#=TableName.Value#>> Populate(string whsql,List<ParameterPopulate> ppList)
		{
			List<<#=TableName.Value#>> list = new List<<#=TableName.Value#>>();
			Database db = DBHelper.CreateDataBase();
			string strSql =" select * from <#=TableName.Value #> where " +whsql;
			DbCommand cmd = db.GetSqlStringCommand(strSql);  
			if( ppList != null)
			{			
				foreach (ParameterPopulate pp in ppList)
				{
					db.AddInParameter(cmd, pp.ParName, pp.ParDbType, pp.ParValue);
				}	
			}			
			using (IDataReader reader = db.ExecuteReader(cmd))
			{
				while (reader.Read())
				{
					list.Add(new <#=TableName.Value#>()
					{
						<#=populateValueStr#>
					});
				}
			}
			return list;			
		}
	}
}
