// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SmartCodeGenerator.Templates.NTierEntLib.DAL
{
    using System.Data;
    using System.Xml;
    using System.Text;
    using SmartCodeGenerator.Uility;
    using System;
    
    
    #line 1 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class N-T-DataAcess : N-T-DataAcessBase
    {
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
        public virtual string TransformText()
        {
            this.GenerationEnvironment = null;
            this.Write("\r\n//  Copyright © Hewlett-Packard Company. All Rights Reserved.\r\n// </copyright>\r" +
                    "\n");
            
            #line 15 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"

SqlDBHelper sqlHelper = new SqlDBHelper(ConnectionStr.Value); 
CodeGenerateHelper cghelper = new  CodeGenerateHelper(sqlHelper);
DataTable dt =  cghelper.GetDtColumnsInfo(TableName.Value );

            
            #line default
            #line hidden
            this.Write("using System;\r\nusing System.Text;\r\nusing System.Data;\r\nusing System.Data.SqlClien" +
                    "t;\r\nusing System.Data.Common;\r\nusing System.Collections.Generic;\r\nusing System.C" +
                    "ollections;\r\nusing Microsoft.Practices.EnterpriseLibrary.Data;\r\nusing ");
            
            #line 28 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NameSpace.Value));
            
            #line default
            #line hidden
            this.Write(".Common;\r\nusing ");
            
            #line 29 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NameSpace.Value));
            
            #line default
            #line hidden
            this.Write(".Entities;\r\n\r\nnamespace ");
            
            #line 31 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NameSpace.Value));
            
            #line default
            #line hidden
            this.Write(".DataAccess\r\n{\r\n\t/// <summary> \r\n\t/// Class  ");
            
            #line 34 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write("Access\r\n\t/// Generated DateTime   ");
            
            #line 35 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now));
            
            #line default
            #line hidden
            this.Write("\r\n\t/// </summary>\r\n\tpublic class  ");
            
            #line 37 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write("Access\r\n\t{\r\n");
            
            #line 39 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"

  StringBuilder pkwSqlStr = new StringBuilder();
  StringBuilder pkwSqlStr2 = new StringBuilder();
  StringBuilder pkConditionStr = new StringBuilder();		  
  StringBuilder pkParameterStr = new StringBuilder();
  StringBuilder pkParameterValueStr = new StringBuilder();
  StringBuilder pkVaulesStr = new StringBuilder(); 
  StringBuilder rowMapperStr = new StringBuilder(); 
  StringBuilder accessorStr = new StringBuilder(); 
  
  StringBuilder allwSqlStr = new StringBuilder();
  StringBuilder allConditionStr = new StringBuilder();
  StringBuilder allParameterStr = new StringBuilder();
  StringBuilder allParameterValueStr = new StringBuilder();
  StringBuilder populateValueStr = new StringBuilder();
  
  int pkCount = 0;
  
  rowMapperStr.Append("IRowMapper<"+TableName.Value+"> map = MapBuilder<"+TableName.Value+">.MapAllProperties().");
  accessorStr.Append("accessor = db.CreateSqlStringAccessor(strSql,MapBuilder<"+TableName.Value+">.MapAllProperties(). ");
  pkParameterValueStr.Append("new object[]{");
  for(int i = 0; i < dt.Rows.Count; i++)
  {
	  rowMapperStr.Append(Environment.NewLine+"				Map(p => p."+dt.Rows[i]["ColumnName"].ToString()+").ToColumn(\""+dt.Rows[i]["ColumnName"].ToString()+"\").");
	  accessorStr.Append(Environment.NewLine+" 				Map(p => p."+dt.Rows[i]["ColumnName"].ToString()+").ToColumn(\""+dt.Rows[i]["ColumnName"].ToString()+"\").");
	  if(populateValueStr.Length >0)
	  {
			populateValueStr.Append( ","+Environment.NewLine+"						"+dt.Rows[i]["ColumnName"].ToString()+" = reader.Get"+cghelper.convertToDbType(dt.Rows[i]["DataTypeName"].ToString()) +"("+i.ToString()+")" );
	  }
	  else
	  {
			populateValueStr.Append( dt.Rows[i]["ColumnName"].ToString()+" = reader.Get"+cghelper.convertToDbType(dt.Rows[i]["DataTypeName"].ToString()) +"("+i.ToString()+")" );
	  }
	  	   
      if(dt.Rows[i]["IsPK"].ToString() == "Y")
	  {
		  pkCount = pkCount + 1;
		  
		  if(pkConditionStr.Length >0)
		  {
				pkConditionStr.Append(","+cghelper.conver(dt.Rows[i]["DataTypeName"].ToString()) +" "+dt.Rows[i]["ColumnName"].ToString().ToLower() );
		  }
		  else
		  {
			    pkConditionStr.Append(cghelper.conver(dt.Rows[i]["DataTypeName"].ToString()) +" "+dt.Rows[i]["ColumnName"].ToString().ToLower());
		  }
		  if(pkwSqlStr.Length >0)
		  {
				pkwSqlStr.Append(" and "+ dt.Rows[i]["ColumnName"].ToString() +"=@P"+pkCount.ToString());
		  }
		  else
		  {
				pkwSqlStr.Append(" " + dt.Rows[i]["ColumnName"].ToString() +"=@P"+pkCount.ToString());
		  }
		  if(pkwSqlStr2.Length >0)
		  {
				pkwSqlStr2.Append(" and "+ dt.Rows[i]["ColumnName"].ToString() +"=@"+dt.Rows[i]["ColumnName"].ToString());
		  }
		  else
		  {
				pkwSqlStr2.Append(" " + dt.Rows[i]["ColumnName"].ToString() +"=@"+dt.Rows[i]["ColumnName"].ToString());
		  }

		  if(pkParameterStr.Length ==0)
		  {
				pkParameterStr.Append("db.AddInParameter(cmd, \"@"+ dt.Rows[i]["ColumnName"].ToString() +"\",DbType."+cghelper.convertToDbType(dt.Rows[i]["DataTypeName"].ToString())+","+dt.Rows[i]["ColumnName"].ToString().ToLower()+");"+Environment.NewLine);
		  }
		  else
		  {
				pkParameterStr.Append("			db.AddInParameter(cmd, \"@"+ dt.Rows[i]["ColumnName"].ToString() +"\",DbType."+cghelper.convertToDbType(dt.Rows[i]["DataTypeName"].ToString())+","+dt.Rows[i]["ColumnName"].ToString().ToLower()+");"+Environment.NewLine);
		  }
		  if( pkParameterValueStr.ToString().IndexOf("{") == pkParameterValueStr.ToString().Length-1)
		  {
				pkParameterValueStr.Append(dt.Rows[i]["ColumnName"].ToString().ToLower());
		  }
		  else
		  {
		        pkParameterValueStr.Append(","+dt.Rows[i]["ColumnName"].ToString().ToLower());
		  }
	  }	
	  if(allwSqlStr.Length >0)
	  {
		  allwSqlStr.Append(" and "+ dt.Rows[i]["ColumnName"].ToString() +"=@"+dt.Rows[i]["ColumnName"].ToString());
	  }
	  else
	  {
		  allwSqlStr.Append(" " + dt.Rows[i]["ColumnName"].ToString() +"=@"+dt.Rows[i]["ColumnName"].ToString());
	  }			  		  
	  if(allConditionStr.Length >0)
	  {
			allConditionStr.Append(","+cghelper.conver(dt.Rows[i]["DataTypeName"].ToString()) +" "+dt.Rows[i]["ColumnName"].ToString().ToLower() );
	  }
	  else
	  {
		    allConditionStr.Append(cghelper.conver(dt.Rows[i]["DataTypeName"].ToString()) +" "+dt.Rows[i]["ColumnName"].ToString().ToLower());			  
	  }	   
	  if(allParameterStr.Length == 0)
	  {
			allParameterStr.Append("db.AddInParameter(cmd, \"@"+ dt.Rows[i]["ColumnName"].ToString() +"\",DbType."+cghelper.convertToDbType(dt.Rows[i]["DataTypeName"].ToString())+","+dt.Rows[i]["ColumnName"].ToString().ToLower()+");"+Environment.NewLine);
	  }
	  else
	  {
			allParameterStr.Append("			db.AddInParameter(cmd, \"@"+ dt.Rows[i]["ColumnName"].ToString() +"\",DbType."+cghelper.convertToDbType(dt.Rows[i]["DataTypeName"].ToString())+","+dt.Rows[i]["ColumnName"].ToString().ToLower()+");"+Environment.NewLine);
	  }
  }
  rowMapperStr.Append("Build();");
  accessorStr.Append("Build() );");
  pkParameterValueStr.Append("}");
  if(pkCount > 0)
  {

            
            #line default
            #line hidden
            this.Write("\t\t///<summary>\r\n\t\t/// Exists\r\n\t\t///</summary>\r\n\t\tpublic bool Exists(");
            
            #line 153 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pkConditionStr.ToString()));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t{\r\n\t\t\tDatabase db = DBHelper.CreateDataBase();\r\n\t\t\tstring strSql =\" select c" +
                    "ount(1) from ");
            
            #line 156 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write(" where ");
            
            #line 156 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pkwSqlStr2.ToString()));
            
            #line default
            #line hidden
            this.Write(" \";\r\n\t\t\tDbCommand cmd = db.GetSqlStringCommand(strSql); \r\n\t\t\t");
            
            #line 158 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pkParameterStr.ToString()));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\treturn db.ExecuteNonQuery(cmd) > 0 ? true : false;\r\n\t\t}\r\n\r\n\t\t///<summary>\r\n\t" +
                    "\t/// Get Entity\r\n\t\t///</summary>\r\n\t\tpublic ");
            
            #line 165 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write(" Get");
            
            #line 165 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 165 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pkConditionStr.ToString()));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t{\r\n\t\t\t");
            
            #line 167 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write(" model = null;\r\n\t\t\tDatabase db = DBHelper.CreateDataBase();\r\n\t\t\tstring strSql =\"s" +
                    "elect * from [");
            
            #line 169 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write("]  where ");
            
            #line 169 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pkwSqlStr2.ToString()));
            
            #line default
            #line hidden
            this.Write(" \";\r\n\t\t\tDbCommand cmd = db.GetSqlStringCommand(strSql);\r\n\t\t\t");
            
            #line 171 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pkParameterStr.ToString()));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\tusing (IDataReader reader = db.ExecuteReader(cmd))\r\n\t\t\t{\r\n\t\t\t\twhile (reader." +
                    "Read())\r\n\t\t\t\t{\r\n\t\t\t\t\tmodel = new ");
            
            #line 176 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write("()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t");
            
            #line 178 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(populateValueStr));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn  model;\r\n\t\t}\r\n\r\n\t\t///<summary>\r\n\t\t/// Delete\r\n\t" +
                    "\t///</summary>\r\n\t\tpublic bool Delete");
            
            #line 188 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 188 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pkConditionStr.ToString()));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t{\r\n\t\t\tDatabase db = DBHelper.CreateDataBase();\r\n\t\t\tstring strSql =\"delete fr" +
                    "om [");
            
            #line 191 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write("]  where ");
            
            #line 191 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pkwSqlStr2.ToString()));
            
            #line default
            #line hidden
            this.Write(" \";\r\n\t\t\tDbCommand cmd = db.GetSqlStringCommand(strSql);\r\n\t\t\t");
            
            #line 193 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pkParameterStr.ToString()));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\treturn db.ExecuteNonQuery(cmd) > 0 ? true : false; \r\n\t\t}\r\n");
            
            #line 196 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"

  }

            
            #line default
            #line hidden
            this.Write("\t\t///<summary>\r\n\t\t/// Insert\r\n\t\t///</summary>\r\n\t\tpublic bool Insert");
            
            #line 202 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 202 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write(" model)\r\n\t\t{\r\n");
            
            #line 204 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"

	string insertSql = "";
	StringBuilder insertSqlStr = new StringBuilder();	
	StringBuilder insertSqlStrValues = new StringBuilder();	
	StringBuilder insertParameterStr = new StringBuilder(); 
	
	for(int i = 0; i < dt.Rows.Count; i++)
	{	
		if(insertSqlStr.Length>0)
		{			
			insertSqlStr.Append(","+dt.Rows[i]["ColumnName"].ToString());
		}
		else
		{
			insertSqlStr.Append("("+dt.Rows[i]["ColumnName"].ToString());
		}
		if(insertSqlStrValues.Length>0)
		{			
			insertSqlStrValues.Append(",@"+dt.Rows[i]["ColumnName"].ToString());
		}
		else
		{
			insertSqlStrValues.Append("(@"+dt.Rows[i]["ColumnName"].ToString());
		}
		if(insertParameterStr.Length==0)
		{
				insertParameterStr.Append("db.AddInParameter(cmd, \"@"+ dt.Rows[i]["ColumnName"].ToString() +"\",DbType."+cghelper.convertToDbType(dt.Rows[i]["DataTypeName"].ToString())+",model."+dt.Rows[i]["ColumnName"].ToString() +");"+Environment.NewLine);	
		}
		else
		{
		        insertParameterStr.Append("			db.AddInParameter(cmd, \"@"+ dt.Rows[i]["ColumnName"].ToString() +"\",DbType."+cghelper.convertToDbType(dt.Rows[i]["DataTypeName"].ToString())+",model."+dt.Rows[i]["ColumnName"].ToString()+");"+Environment.NewLine);	
		}
		 
	}
	insertSqlStr.Append(")");
	insertSqlStrValues.Append(")");
	insertSql = "insert into ["+TableName.Value+"]"+insertSqlStr.ToString()+" values "+insertSqlStrValues.ToString(); 

            
            #line default
            #line hidden
            this.Write("\t\t\tDatabase db = DBHelper.CreateDataBase();\r\n\t\t\tstring strSql =\"");
            
            #line 243 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(insertSql.ToString()));
            
            #line default
            #line hidden
            this.Write("\";\r\n\t\t\tDbCommand cmd = db.GetSqlStringCommand(strSql); \r\n\t\t\t");
            
            #line 245 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(insertParameterStr.ToString()));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\treturn db.ExecuteNonQuery(cmd) > 0 ? true : false;           \r\n\t\t}\r\n\r\n\t\t///<" +
                    "summary>\r\n\t\t/// Update\r\n\t\t///</summary>\r\n\t\tpublic bool Update");
            
            #line 252 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 252 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write(" model)\r\n\t\t{\r\n");
            
            #line 254 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"

	string updateSql = ""; 	
	StringBuilder updateSqlStrValues = new StringBuilder();	
	StringBuilder updateParameterStr = new StringBuilder();
    StringBuilder updateParameterValueStr = new StringBuilder();	
	for(int i = 0; i < dt.Rows.Count; i++)
	{	 
		if(updateSqlStrValues.Length>0)
		{			
			updateSqlStrValues.Append(","+dt.Rows[i]["ColumnName"].ToString()+"=@"+dt.Rows[i]["ColumnName"].ToString());
		}
		else
		{
			updateSqlStrValues.Append("("+dt.Rows[i]["ColumnName"].ToString()+"=@"+dt.Rows[i]["ColumnName"].ToString());
		}
		if(updateParameterStr.Length == 0)
		{
				updateParameterStr.Append("db.AddInParameter(cmd, \"@"+ dt.Rows[i]["ColumnName"].ToString() +"\",DbType."+cghelper.convertToDbType(dt.Rows[i]["DataTypeName"].ToString())+",model."+dt.Rows[i]["ColumnName"].ToString() +");"+Environment.NewLine);			 
		}
		else
		{
				updateParameterStr.Append("			db.AddInParameter(cmd, \"@"+ dt.Rows[i]["ColumnName"].ToString() +"\",DbType."+cghelper.convertToDbType(dt.Rows[i]["DataTypeName"].ToString())+",model."+dt.Rows[i]["ColumnName"].ToString()+");"+Environment.NewLine);			 
		}
	}
 
	updateSqlStrValues.Append(")");
	updateSql = "update ["+TableName.Value +"] set "+updateSqlStrValues.ToString(); 

            
            #line default
            #line hidden
            this.Write("\t\t\tDatabase db = DBHelper.CreateDataBase();\r\n\t\t\tstring strSql =\"");
            
            #line 283 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(updateSql.ToString()));
            
            #line default
            #line hidden
            this.Write("  where ");
            
            #line 283 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pkwSqlStr2.ToString()));
            
            #line default
            #line hidden
            this.Write(" \";\r\n\t\t\tDbCommand cmd = db.GetSqlStringCommand(strSql); \r\n\t\t\t");
            
            #line 285 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(updateParameterStr.ToString()));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\treturn db.ExecuteNonQuery(cmd) > 0 ? true : false; \r\n\t\t}\r\n\r\n\t\t///<summary>\r\n" +
                    "\t\t/// Populate\r\n\t\t///</summary>\r\n\t\tpublic List<");
            
            #line 292 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write("> Populate(string whsql,List<ParameterPopulate> ppList)\r\n\t\t{\r\n\t\t\tList<");
            
            #line 294 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write("> list = new List<");
            
            #line 294 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write(">();\r\n\t\t\tDatabase db = DBHelper.CreateDataBase();\r\n\t\t\tstring strSql =\" select * f" +
                    "rom [");
            
            #line 296 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write(@"] where "" +whsql;
			DbCommand cmd = db.GetSqlStringCommand(strSql);
			if( ppList != null)
			{			
				foreach (ParameterPopulate pp in ppList)
				{
					db.AddInParameter(cmd, pp.ParName, pp.ParDbType, pp.ParValue);
				}	
			}			
			using (IDataReader reader = db.ExecuteReader(cmd))
			{
				while (reader.Read())
				{
					list.Add(new ");
            
            #line 309 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write("()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t");
            
            #line 311 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(populateValueStr));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn list;\t\t\t\r\n\t\t}\r\n\t}\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\DAL\N-T-DataAcess.tt"

private global::SmartCodeGenerator.Parameter _ConnectionStrField;

/// <summary>
/// Access the ConnectionStr parameter of the template.
/// </summary>
private global::SmartCodeGenerator.Parameter ConnectionStr
{
    get
    {
        return this._ConnectionStrField;
    }
}

private global::SmartCodeGenerator.Parameter _NameSpaceField;

/// <summary>
/// Access the NameSpace parameter of the template.
/// </summary>
private global::SmartCodeGenerator.Parameter NameSpace
{
    get
    {
        return this._NameSpaceField;
    }
}

private global::SmartCodeGenerator.Parameter _TableNameField;

/// <summary>
/// Access the TableName parameter of the template.
/// </summary>
private global::SmartCodeGenerator.Parameter TableName
{
    get
    {
        return this._TableNameField;
    }
}


public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool ConnectionStrValueAcquired = false;
if (this.Session.ContainsKey("ConnectionStr"))
{
    if ((typeof(global::SmartCodeGenerator.Parameter).IsAssignableFrom(this.Session["ConnectionStr"].GetType()) == false))
    {
        this.Error("The type \'SmartCodeGenerator.Parameter\' of the parameter \'ConnectionStr\' did not " +
                "match the type of the data passed to the template.");
    }
    else
    {
        this._ConnectionStrField = ((global::SmartCodeGenerator.Parameter)(this.Session["ConnectionStr"]));
        ConnectionStrValueAcquired = true;
    }
}
if ((ConnectionStrValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ConnectionStr");
    if ((data != null))
    {
        if ((typeof(global::SmartCodeGenerator.Parameter).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'SmartCodeGenerator.Parameter\' of the parameter \'ConnectionStr\' did not " +
                    "match the type of the data passed to the template.");
        }
        else
        {
            this._ConnectionStrField = ((global::SmartCodeGenerator.Parameter)(data));
        }
    }
}
bool NameSpaceValueAcquired = false;
if (this.Session.ContainsKey("NameSpace"))
{
    if ((typeof(global::SmartCodeGenerator.Parameter).IsAssignableFrom(this.Session["NameSpace"].GetType()) == false))
    {
        this.Error("The type \'SmartCodeGenerator.Parameter\' of the parameter \'NameSpace\' did not matc" +
                "h the type of the data passed to the template.");
    }
    else
    {
        this._NameSpaceField = ((global::SmartCodeGenerator.Parameter)(this.Session["NameSpace"]));
        NameSpaceValueAcquired = true;
    }
}
if ((NameSpaceValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NameSpace");
    if ((data != null))
    {
        if ((typeof(global::SmartCodeGenerator.Parameter).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'SmartCodeGenerator.Parameter\' of the parameter \'NameSpace\' did not matc" +
                    "h the type of the data passed to the template.");
        }
        else
        {
            this._NameSpaceField = ((global::SmartCodeGenerator.Parameter)(data));
        }
    }
}
bool TableNameValueAcquired = false;
if (this.Session.ContainsKey("TableName"))
{
    if ((typeof(global::SmartCodeGenerator.Parameter).IsAssignableFrom(this.Session["TableName"].GetType()) == false))
    {
        this.Error("The type \'SmartCodeGenerator.Parameter\' of the parameter \'TableName\' did not matc" +
                "h the type of the data passed to the template.");
    }
    else
    {
        this._TableNameField = ((global::SmartCodeGenerator.Parameter)(this.Session["TableName"]));
        TableNameValueAcquired = true;
    }
}
if ((TableNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("TableName");
    if ((data != null))
    {
        if ((typeof(global::SmartCodeGenerator.Parameter).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'SmartCodeGenerator.Parameter\' of the parameter \'TableName\' did not matc" +
                    "h the type of the data passed to the template.");
        }
        else
        {
            this._TableNameField = ((global::SmartCodeGenerator.Parameter)(data));
        }
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class N-T-DataAcessBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
    }
    #endregion
}
