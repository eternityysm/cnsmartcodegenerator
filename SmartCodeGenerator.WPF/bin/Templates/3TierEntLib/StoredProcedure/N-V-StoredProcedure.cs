// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SmartCodeGenerator.Templates.NTierEntLib.StoredProcedure
{
    using System.Data;
    using System.Xml;
    using System.Text;
    using SmartCodeGenerator.Uility;
    using System;
    
    
    #line 1 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class N-V-StoredProcedure : N-V-StoredProcedureBase
    {
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
        public virtual string TransformText()
        {
            this.GenerationEnvironment = null;
            this.Write("\r\n--  Copyright © Hewlett-Packard Company. All Rights Reserved.\r\n-- </copyright>\r" +
                    "\n");
            
            #line 15 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"

  CodeGenerateHelper cghelper = new  CodeGenerateHelper();
  SqlDBHelper sqlHelper = new SqlDBHelper();
  sqlHelper.SqlConnectionString = ConnectionStr.Value;
  DataTable dt = sqlHelper.GetTables("select * from [" + TableName.Value + "]");
  DataTable pkdt = sqlHelper.GetPKs(  TableName.Value );
  dt = cghelper.GetColumnsInfo(dt,pkdt);
 		  
  StringBuilder pkwSqlStr = new StringBuilder();

  StringBuilder pkParameterStr = new StringBuilder();
  StringBuilder pkParameterValueStr = new StringBuilder();
 
  StringBuilder insertFieldStr = new StringBuilder();
  StringBuilder insertParameterStr = new StringBuilder();

  StringBuilder updateSetValuesStr = new StringBuilder();

  StringBuilder allParameterStr = new StringBuilder();
  StringBuilder allParameterValueStr = new StringBuilder();

  StringBuilder tempTbColsStr = new StringBuilder();
  StringBuilder optionalParameterValueStr = new StringBuilder();
  StringBuilder sqlSortStr = new StringBuilder();

  StringBuilder keyVarList = new StringBuilder();

  for(int i = 0; i < dt.Rows.Count; i++)
  {
      if(dt.Rows[i]["IsPK"].ToString() == "Y")
	  {		 
		  if(pkParameterStr.Length >0)
		  {
				pkParameterStr.Append(","+Environment.NewLine+ "@"+ dt.Rows[i]["ColumnName"].ToString() +" "+dt.Rows[i]["DataTypeName"].ToString()+"("+dt.Rows[i]["ColumnSize"].ToString()+")");
		  }
		  else
		  {
				pkParameterStr.Append("@"+ dt.Rows[i]["ColumnName"].ToString() +" "+dt.Rows[i]["DataTypeName"].ToString()+"("+dt.Rows[i]["ColumnSize"].ToString()+")");
		  }
		  if(pkwSqlStr.Length >0)
		  {
				pkwSqlStr.Append(" and "+ dt.Rows[i]["ColumnName"].ToString() +"=@"+dt.Rows[i]["ColumnName"].ToString());
		  }
		  else
		  {
				pkwSqlStr.Append(" " + dt.Rows[i]["ColumnName"].ToString() +"=@"+dt.Rows[i]["ColumnName"].ToString());
		  }
		  
	  }	
	  if(insertFieldStr.Length >0)
	  {
		  insertFieldStr.Append(","+ dt.Rows[i]["ColumnName"].ToString());
	  }
	  else
	  {
		  insertFieldStr.Append( dt.Rows[i]["ColumnName"].ToString());
	  }	
	  if(insertParameterStr.Length >0)
	  {
		  insertParameterStr.Append(",@"+ dt.Rows[i]["ColumnName"].ToString());
	  }
	  else
	  {
		  insertParameterStr.Append("@"+ dt.Rows[i]["ColumnName"].ToString());
	  }		  		  		  
	  if(allParameterStr.Length >0)
	  {
		   allParameterStr.Append(","+Environment.NewLine+ "@"+ dt.Rows[i]["ColumnName"].ToString() +" "+dt.Rows[i]["DataTypeName"].ToString()+"("+dt.Rows[i]["ColumnSize"].ToString()+")");
	  }
	  else
	  {
			allParameterStr.Append("@"+ dt.Rows[i]["ColumnName"].ToString() +" "+dt.Rows[i]["DataTypeName"].ToString()+"("+dt.Rows[i]["ColumnSize"].ToString()+")");
	  }
	  if(updateSetValuesStr.Length >0)
	  {
			updateSetValuesStr.Append(" and "+ dt.Rows[i]["ColumnName"].ToString() +"=@"+dt.Rows[i]["ColumnName"].ToString());
	  }
	  else
	  {
		    updateSetValuesStr.Append(" " + dt.Rows[i]["ColumnName"].ToString() +"=@"+dt.Rows[i]["ColumnName"].ToString());
	  }
	  if(tempTbColsStr.Length >0)
	  {
			tempTbColsStr.Append( Environment.NewLine+"				"+ dt.Rows[i]["ColumnName"].ToString() +" "+dt.Rows[i]["DataTypeName"].ToString()+"("+dt.Rows[i]["ColumnSize"].ToString()+")");
	  }
	  else
	  {
		    tempTbColsStr.Append("				"+dt.Rows[i]["ColumnName"].ToString() +" "+dt.Rows[i]["DataTypeName"].ToString()+"("+dt.Rows[i]["ColumnSize"].ToString()+")" +",");
	  }
	  if(dt.Rows[i]["DataTypeName"].ToString() == "varchar" ||dt.Rows[i]["DataTypeName"].ToString() == "nvarchar" || dt.Rows[i]["DataTypeName"].ToString() == "char" || dt.Rows[i]["DataTypeName"].ToString() == "nchar" )
	  {	
			if(optionalParameterValueStr.Length >0)
			{
				optionalParameterValueStr.Append( Environment.NewLine+"				if @"+ dt.Rows[i]["ColumnName"].ToString() +"=''    SET @"+dt.Rows[i]["ColumnName"].ToString()+"=NULL");
			}
			else
			{
				optionalParameterValueStr.Append("				if @"+ dt.Rows[i]["ColumnName"].ToString() +"=''    SET @"+dt.Rows[i]["ColumnName"].ToString()+"=NULL" );
			}			
	  }
	  if(sqlSortStr.Length >0)
	  {
			sqlSortStr.Append( Environment.NewLine+"				WHEN  '"+ dt.Rows[i]["ColumnName"].ToString() +"'    THEN  '"+dt.Rows[i]["ColumnName"].ToString()+"'   +@p_SortDirection");
	  }
	  else
	  {
			sqlSortStr.Append("				WHEN  '"+ dt.Rows[i]["ColumnName"].ToString() +"'    THEN  '"+dt.Rows[i]["ColumnName"].ToString()+"'   +@p_SortDirection" );
	  }	  
	  if(keyVarList.Length >0)
	  {
			sqlSortStr.Append(","+dt.Rows[i]["ColumnName"].ToString());
	  }
	  else
	  {
			sqlSortStr.Append(dt.Rows[i]["ColumnName"].ToString());
	  }
  }


            
            #line default
            #line hidden
            this.Write("\r\n\r\n/******************************************************************\r\n* TableN" +
                    "ame：");
            
            #line 137 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write("\r\n* Generated Date： ");
            
            #line 138 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now));
            
            #line default
            #line hidden
            this.Write("\r\n******************************************************************/\r\n\r\nif exist" +
                    "s (select * from dbo.sysobjects where id = object_id(N\'[dbo].[Exist");
            
            #line 141 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write("]\') and OBJECTPROPERTY(id, N\'IsProcedure\') = 1)\r\ndrop procedure [dbo].[Exist");
            
            #line 142 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write("]\r\nGO\r\n\r\nCREATE PROCEDURE Exist");
            
            #line 145 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 146 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pkParameterStr.ToString()));
            
            #line default
            #line hidden
            this.Write("\r\nAS\r\n\tDECLARE @TempID int\r\n\tSELECT @TempID = count(1) FROM [");
            
            #line 149 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write("] WHERE ");
            
            #line 149 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pkwSqlStr));
            
            #line default
            #line hidden
            this.Write(" \r\n\tIF @TempID = 0\r\n\t\tRETURN 0\r\n\tELSE\r\n\t\tRETURN 1\r\n\r\nGO\r\n\r\nif exists (select * fr" +
                    "om dbo.sysobjects where id = object_id(N\'[dbo].[Get");
            
            #line 157 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write("]\') and OBJECTPROPERTY(id, N\'IsProcedure\') = 1)\r\ndrop procedure [dbo].[Get");
            
            #line 158 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write("]\r\nGO\r\n \r\nCREATE PROCEDURE Get");
            
            #line 161 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 162 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pkParameterStr.ToString()));
            
            #line default
            #line hidden
            this.Write("\r\n AS \r\n\tSELECT \r\n\t*\r\n\t FROM [");
            
            #line 166 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write("]\r\n\t WHERE ");
            
            #line 167 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pkwSqlStr.ToString()));
            
            #line default
            #line hidden
            this.Write(" \r\n\r\nGO\r\n\r\nif exists (select * from dbo.sysobjects where id = object_id(N\'[dbo].[" +
                    "Populate");
            
            #line 171 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write("]\') and OBJECTPROPERTY(id, N\'IsProcedure\') = 1)\r\ndrop procedure [dbo].[Populate");
            
            #line 172 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write("]\r\nGO\r\n \r\nCREATE PROCEDURE Populate");
            
            #line 175 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 176 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(allParameterStr.ToString()));
            
            #line default
            #line hidden
            this.Write(@"
@p_CurrPageNum			int				= NULL,
@p_PageSize				int				= NULL, 
@p_SortField			varchar(100)	= NULL,
@p_SortDirection		varchar(4)		= NULL 

 AS 
BEGIN
	BEGIN TRY
    --Declare and set variables	
	DECLARE @strSQL_Count				varchar(20),
			@strSQL_Insert				varchar(max),
			@strSQL_FromMainTable		varchar(max),
			@strSQL_KeyVarList			varchar(max),
			@strSQL_Sort				varchar(200),
			@strSQL_SortList			varchar(200),
			@strSQL_Where				varchar(max),
            @strSQL_LeaseItemOR			varchar(max),
			@strSQL_FilterJoins			varchar(max),
			@strRowNumData				varchar(max),
			@begRowRange				int,
			@endRowRange				int,
			@rowCount					int

	-- Set Optional Parameter Values
");
            
            #line 201 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(optionalParameterValueStr.ToString()));
            
            #line default
            #line hidden
            this.Write(@"
	-- Set Default Parameter Values	 
	IF @p_CurrPageNum	IS NULL OR @p_CurrPageNum = ''	OR @p_CurrPageNum = 0		SET @p_CurrPageNum = 1
	IF @p_PageSize		IS NULL OR @p_PageSize = ''   	OR @p_PageSize = 0			SET @p_PageSize = 50
	IF @p_SortField		IS NULL OR @p_SortField = ''								SET @p_SortField = ' '
	IF @p_SortDirection	IS NULL														SET @p_SortDirection = ' ASC '

    SET @begRowRange = 0

    IF OBJECT_ID('tempdb..#tblSearch') IS NOT NULL 
		DROP TABLE dbo.#tblSearch
    --	Declare a temporary table that will store the result set based on the parameters 
    CREATE TABLE #tblSearch
	(		  
				RowNum	 int null,
");
            
            #line 216 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tempTbColsStr.ToString()));
            
            #line default
            #line hidden
            this.Write(@"
	)

    /****************************************************************************************/
	/* Build Sort string.  Key words indicate page-specific sort criteria					*/
	/****************************************************************************************/
	SET @strSQL_Sort = (SELECT CASE @p_SortField 
");
            
            #line 223 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sqlSortStr.ToString()));
            
            #line default
            #line hidden
            this.Write(@"
        ELSE  @p_SortField
     END)

	/****************************************************************************************/
	/* Set @begRowRange and @endRowRange based on CurrPageNum and PageSize					*/
	/****************************************************************************************/
	SET @begRowRange = ((@p_CurrPageNum - 1) * @p_PageSize) + 1
	SET @endRowRange = @begRowRange + @p_PageSize - 1
	/****************************************************************************************/
	/* Key variable list includes 1) key values that uniquely identify the record;			*/
	/*	2) parameter variables needed for filtering and sorting and 3) any other display	*/
	/*	variables that can be picked up from joined tables.  Note table alias adjoined.		*/
	/****************************************************************************************/
	SET @strSQL_KeyVarList = ' ");
            
            #line 237 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(keyVarList.ToString()));
            
            #line default
            #line hidden
            this.Write(@" '

	/****************************************************************************************/
	/* Set up SQL pieces		                 */
	/****************************************************************************************/
	SET @strSQL_Count = ' SELECT COUNT(*) ' 
    SET @strSQL_FromMainTable = ' FROM ");
            
            #line 243 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName.Value));
            
            #line default
            #line hidden
            this.Write(" WITH(NOLOCK) \'\r\n\t\t \r\n    SET @strSQL_Where =  \' where 1=1 \'\r\n\r\n");
            
            #line 247 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"

  for(int i = 0; i < dt.Rows.Count; i++)
  {

            
            #line default
            #line hidden
            this.Write("\tIF @");
            
            #line 251 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dt.Rows[i]["ColumnName"].ToString()));
            
            #line default
            #line hidden
            this.Write(" IS NOT NULL\r\n\t\tBEGIN\r\n");
            
            #line 253 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"

	   string tmpDataType = cghelper.conver(dt.Rows[i]["DataTypeName"].ToString()) ;
	   if(tmpDataType== "string" )
	   {

            
            #line default
            #line hidden
            this.Write("\t\tIF CHARINDEX(\'%\',@");
            
            #line 258 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dt.Rows[i]["ColumnName"].ToString()));
            
            #line default
            #line hidden
            this.Write(") = 0\r\n\t\t\tBEGIN\r\n\t\t\t\tSET @strSQL_Where = @strSQL_Where + \' and ");
            
            #line 260 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dt.Rows[i]["ColumnName"].ToString()));
            
            #line default
            #line hidden
            this.Write(" = \'\'\' + @");
            
            #line 260 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dt.Rows[i]["ColumnName"].ToString()));
            
            #line default
            #line hidden
            this.Write(" + \'\'\' \' \r\n\t\t\tEND\r\n\t\tELSE\r\n\t\t\tBEGIN\r\n\t\t\t\tSET @strSQL_Where =@strSQL_Where + \' and" +
                    " ");
            
            #line 264 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dt.Rows[i]["ColumnName"].ToString()));
            
            #line default
            #line hidden
            this.Write(" Like \'\'\' + @");
            
            #line 264 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dt.Rows[i]["ColumnName"].ToString()));
            
            #line default
            #line hidden
            this.Write(" + \'\'\' \' \r\n\t\t\tEND\t\r\n\t\tEND   \r\n");
            
            #line 267 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"

       } 
	   else
	   {

            
            #line default
            #line hidden
            this.Write("\t   IF @");
            
            #line 272 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dt.Rows[i]["ColumnName"].ToString()));
            
            #line default
            #line hidden
            this.Write(" IS NOT NULL \r\n\t   BEGIN\r\n\t\t\tSet @strSQL_Where = @strSQL_Where +  N\' and ");
            
            #line 274 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dt.Rows[i]["ColumnName"].ToString()));
            
            #line default
            #line hidden
            this.Write(" = \'\'\' + @");
            
            #line 274 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dt.Rows[i]["ColumnName"].ToString()));
            
            #line default
            #line hidden
            this.Write("+\'\'\' \'\r\n\t   END\r\n");
            
            #line 276 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"

	   }
  }

            
            #line default
            #line hidden
            this.Write("\r\n\t/*****************************************************************************" +
                    "***************/\r\n\t/* Build RowNumData based on sort, filter, and page.  Key and" +
                    " sort variables are included\t*/\r\n\t/*********************************************" +
                    "***********************************************/\r\n    SET @strRowNumData = \' ( S" +
                    "ELECT  \'\r\n\r\n    SET @strRowNumData =  @strRowNumData + \' TOP \' + cast(@endRowRan" +
                    "ge as varchar) \r\n    SET @strRowNumData =  @strRowNumData  + \' ROW_NUMBER() OVER" +
                    "(ORDER BY \' + @strSQL_Sort + \' ) as RowNum, \' +\r\n\t\t\t\t\t\t  @strSQL_KeyVarList + \' " +
                    "\' + \r\n\t\t\t\t\t\t  @strSQL_FromMainTable +  \' \' +\r\n\t\t\t\t\t\t  @strSQL_Where \r\n \r\n    SET" +
                    " @strRowNumData = @strRowNumData + \' ORDER BY  \' + @strSQL_Sort\r\n    SET @strRow" +
                    "NumData = @strRowNumData + \') lt \'\r\n    SET @strSQL_Insert =  \'INSERT INTO #tblS" +
                    "earch\' +  \' SELECT lt.* FROM \' + @strRowNumData\t \r\n    SET @strSQL_Insert = @str" +
                    "SQL_Insert + \'  WHERE RowNum BETWEEN \' + cast(@begRowRange as varchar) + \' AND \'" +
                    " + cast(@endRowRange as varchar)\r\n    /*****************************************" +
                    "***********************************************/\r\n    /* Fill of temp table with" +
                    " data from current page\t\t\t\t\t\t\t\t\t\t*/\r\n    /**************************************" +
                    "**************************************************/\t\r\n    EXEC (@strSQL_Insert)\r" +
                    "\n    /**************************************************************************" +
                    "**************/\r\n    /* Return 1st Dataset:\tAll data needed to display current p" +
                    "age\t\t\t\t\t\t\t*/\r\n\t/* If Excel, don\'t select hidden columns\t\t\t\t\t\t\t\t\t\t\t\t*/\r\n\t/*******" +
                    "********************************************************************************" +
                    "*/\r\n\tselect * from #tblSearch\r\n\t/***********************************************" +
                    "*****************************************/\r\n\t/* Return 2nd Dataset:\tCount of Tot" +
                    "al Number of records produced by user filter\t\t*/\r\n\t/****************************" +
                    "************************************************************/     \r\n    EXEC ( @" +
                    "strSQL_Count  + @strSQL_FromMainTable  + @strSQL_Where )\r\n\r\n\tIF OBJECT_ID(\'tempd" +
                    "b..#tblSearch\') IS NOT NULL \r\n\t\tDROP TABLE #tblSearch \r\n\r\n \tEND TRY\r\n\tBEGIN CATC" +
                    "H\t\r\n\t--Handle any T-SQL errors and raise them back to the client by calling the " +
                    "GLR_sp_RethrowError stored procedure.\t\r\n\tIF OBJECT_ID(\'tempdb..#tblSearch\') IS N" +
                    "OT NULL \r\n\t\tDROP TABLE dbo.#tblSearch \r\n\r\n\tIF ERROR_NUMBER() IS NULL\r\n\t\tRETURN\r\n" +
                    "\r\n    DECLARE \r\n        @ErrorMessage    NVARCHAR(4000),\r\n        @ErrorNumber  " +
                    "   INT,\r\n        @ErrorSeverity   INT,\r\n        @ErrorState      INT,\r\n        @" +
                    "ErrorLine       INT,\r\n        @ErrorProcedure  NVARCHAR(200)\r\n\r\n    -- Assign va" +
                    "riables to error-handling functions that \r\n    -- capture information for RAISER" +
                    "ROR.\r\n    SELECT \r\n        @ErrorNumber = ERROR_NUMBER(),\r\n        @ErrorSeverit" +
                    "y = ERROR_SEVERITY(),\r\n        @ErrorState = ERROR_STATE(),\r\n        @ErrorLine " +
                    "= ERROR_LINE(),\r\n        @ErrorProcedure = ISNULL(ERROR_PROCEDURE(), \'-\')\r\n\r\n   " +
                    " -- Build the message string that will contain original\r\n    -- error informatio" +
                    "n.\r\n    SELECT @ErrorMessage =    N\'Error %d, Level %d, State %d, Procedure %s, " +
                    "Line %d, \' +    \'Message: \'+ ERROR_MESSAGE()\r\n\r\n    -- Raise an error: msg_str p" +
                    "arameter of RAISERROR will contain\r\n    -- the original error information.\r\n    " +
                    "RAISERROR \r\n    (\r\n        @ErrorMessage, \r\n        @ErrorSeverity, \r\n        1," +
                    "               \r\n        @ErrorNumber,    -- parameter: original error number.\r\n" +
                    "        @ErrorSeverity,  -- parameter: original error severity.\r\n        @ErrorS" +
                    "tate,     -- parameter: original error state.\r\n        @ErrorProcedure, -- param" +
                    "eter: original error procedure name.\r\n        @ErrorLine       -- parameter: ori" +
                    "ginal error line number.\r\n      )\t\r\n\tEND CATCH\t\t\r\nEND\r\n\r\n\r\n\t \r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\Users\fanxianj\TechSpace\SmartCodeGenerator\SmartCodeGenerator.WPF\Templates\NTierEntLib\StoredProcedure\N-V-StoredProcedure.tt"

private global::SmartCodeGenerator.Parameter _ConnectionStrField;

/// <summary>
/// Access the ConnectionStr parameter of the template.
/// </summary>
private global::SmartCodeGenerator.Parameter ConnectionStr
{
    get
    {
        return this._ConnectionStrField;
    }
}

private global::SmartCodeGenerator.Parameter _NameSpaceField;

/// <summary>
/// Access the NameSpace parameter of the template.
/// </summary>
private global::SmartCodeGenerator.Parameter NameSpace
{
    get
    {
        return this._NameSpaceField;
    }
}

private global::SmartCodeGenerator.Parameter _TableNameField;

/// <summary>
/// Access the TableName parameter of the template.
/// </summary>
private global::SmartCodeGenerator.Parameter TableName
{
    get
    {
        return this._TableNameField;
    }
}


public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool ConnectionStrValueAcquired = false;
if (this.Session.ContainsKey("ConnectionStr"))
{
    if ((typeof(global::SmartCodeGenerator.Parameter).IsAssignableFrom(this.Session["ConnectionStr"].GetType()) == false))
    {
        this.Error("The type \'SmartCodeGenerator.Parameter\' of the parameter \'ConnectionStr\' did not " +
                "match the type of the data passed to the template.");
    }
    else
    {
        this._ConnectionStrField = ((global::SmartCodeGenerator.Parameter)(this.Session["ConnectionStr"]));
        ConnectionStrValueAcquired = true;
    }
}
if ((ConnectionStrValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ConnectionStr");
    if ((data != null))
    {
        if ((typeof(global::SmartCodeGenerator.Parameter).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'SmartCodeGenerator.Parameter\' of the parameter \'ConnectionStr\' did not " +
                    "match the type of the data passed to the template.");
        }
        else
        {
            this._ConnectionStrField = ((global::SmartCodeGenerator.Parameter)(data));
        }
    }
}
bool NameSpaceValueAcquired = false;
if (this.Session.ContainsKey("NameSpace"))
{
    if ((typeof(global::SmartCodeGenerator.Parameter).IsAssignableFrom(this.Session["NameSpace"].GetType()) == false))
    {
        this.Error("The type \'SmartCodeGenerator.Parameter\' of the parameter \'NameSpace\' did not matc" +
                "h the type of the data passed to the template.");
    }
    else
    {
        this._NameSpaceField = ((global::SmartCodeGenerator.Parameter)(this.Session["NameSpace"]));
        NameSpaceValueAcquired = true;
    }
}
if ((NameSpaceValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NameSpace");
    if ((data != null))
    {
        if ((typeof(global::SmartCodeGenerator.Parameter).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'SmartCodeGenerator.Parameter\' of the parameter \'NameSpace\' did not matc" +
                    "h the type of the data passed to the template.");
        }
        else
        {
            this._NameSpaceField = ((global::SmartCodeGenerator.Parameter)(data));
        }
    }
}
bool TableNameValueAcquired = false;
if (this.Session.ContainsKey("TableName"))
{
    if ((typeof(global::SmartCodeGenerator.Parameter).IsAssignableFrom(this.Session["TableName"].GetType()) == false))
    {
        this.Error("The type \'SmartCodeGenerator.Parameter\' of the parameter \'TableName\' did not matc" +
                "h the type of the data passed to the template.");
    }
    else
    {
        this._TableNameField = ((global::SmartCodeGenerator.Parameter)(this.Session["TableName"]));
        TableNameValueAcquired = true;
    }
}
if ((TableNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("TableName");
    if ((data != null))
    {
        if ((typeof(global::SmartCodeGenerator.Parameter).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'SmartCodeGenerator.Parameter\' of the parameter \'TableName\' did not matc" +
                    "h the type of the data passed to the template.");
        }
        else
        {
            this._TableNameField = ((global::SmartCodeGenerator.Parameter)(data));
        }
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class N-V-StoredProcedureBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
    }
    #endregion
}
